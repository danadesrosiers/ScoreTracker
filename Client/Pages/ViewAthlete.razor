@page "/athletes/{AthleteId}"
@inject IUserService UserService
@inject IAthleteService AthleteService
@using ScoreTracker.Client.Services
@using ScoreTracker.Shared.Athletes

<h1>@Athlete?.Name (<a href="/clubs/@Athlete?.ClubId">@Athlete?.ClubName</a>)</h1>
@if (Athlete != null && UserService.IsLoggedIn())
{
    if (!UserService.User.IsFollowingAthlete(AthleteId))
    {
        <button @onclick="_ => UserService.FollowAthleteAsync(AthleteId, Athlete.Name!)">Follow</button>
    }
    else
    {
        <button @onclick="_ => UserService.StopFollowingAthleteAsync(AthleteId)">Stop Following</button>
    }
}
<h2>Meets</h2>
@foreach (var (id, name) in Meets)
{
    <div><a href="/meets/@id">@name</a></div>
}

<h2>Results</h2>
@foreach (var result in Results)
{
    <div>Name: @result.AthleteName, @result.MeetName, @result.Event: @result.Score.FinalScore</div>
}

@code
{
    [Parameter]
    public string AthleteId { get; init; } = null!;

    Athlete? Athlete { get; set; }
    Dictionary<string, string> Meets { get; } = new();
    List<AthleteResult> Results { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Athlete = await AthleteService.GetAthleteAsync(AthleteId);
        Results = Athlete?.RecentScores.ToList() ?? new List<AthleteResult>();
        foreach (var result in Results.Where(result => !Meets.ContainsKey(result.MeetId)))
        {
            Meets[result.MeetId] = result.MeetName;
        }
    }
}
