@page "/meets"
@using ScoreTracker.Shared
@using Enum = System.Enum
@using ScoreTracker.Client.Services
@using Microsoft.AspNetCore.Components
@using ScoreTracker.Client.Models
@inject IMeetService _meetService
@inject StateContainer _state
@inherits CustomComponentBase

<h1>Find A Meet</h1>

<div id="search-filters">
    State:
    <select @bind="SearchForm.SelectedState">
        <option>Select a State</option>
        @foreach (var stateCode in (StateCode[])Enum.GetValues(typeof(StateCode)))
        {
            <option value="@stateCode" selected="@(SearchForm.SelectedState == stateCode)">@stateCode.ToString().ToUpper()</option>
        }
    </select>

    Discipline:
    <select @bind="SearchForm.SelectedDiscipline">
        <option> Select a Discipline</option>
        @foreach (var discipline in Enum.GetNames(typeof(Discipline)))
        {
            <option value="@discipline" selected="@(SearchForm.SelectedDiscipline?.ToString() == discipline)">@discipline</option>
        }
    </select>

    Year:
    <input
        type="number"
        min="@(DateTime.Today.Year - 4)"
        max="@(DateTime.Today.Year + 1)"
        @bind="SearchForm.SelectedSeason" />
</div>

@if (SearchForm.SelectedSeason > 0 && SearchForm.SelectedState != null && SearchForm.SelectedDiscipline != null)
{
    <div>
        Search: <input type="text" @bind=SearchForm.SearchString />
        @foreach (var (meetId, meetName) in SearchResults)
        {
            <div><a href="/meets/@meetId">@meetName</a></div>
        }
    </div>
}

@code
{
    private SearchForm SearchForm { get; set; } = null!;

    private Dictionary<string, string> SearchResults { get; set; } = new();

    protected override void OnInitialized()
    {
        SearchForm = _state.SearchForm;
        OnChange(() => SearchForm, SearchMeetsAsync);
    }

    private async Task SearchMeetsAsync(SearchForm? oldSearchFormModel = null)
    {
        if (SearchForm.SelectedSeason > 0 && SearchForm.SelectedState != null && SearchForm.SelectedDiscipline != null)
        {
            SearchResults = await _meetService.SearchMeetsAsync(
                SearchForm.SelectedSeason,
                SearchForm.SelectedState,
                SearchForm.SelectedDiscipline,
                SearchForm.SearchString);
        }
    }
}