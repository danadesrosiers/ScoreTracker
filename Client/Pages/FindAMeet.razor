@page "/meets"
@using ScoreTracker.Shared
@using Enum = System.Enum
@using ScoreTracker.Client.Services
@using System.ComponentModel
@inject MeetService MeetService
@inject StateContainer State

<h1>Find A Meet</h1>

<div id="search-filters">
    State:
    <select @bind=State.SelectedState>
        <option>Select a State</option>
        @foreach (var stateCode in (StateCode[])Enum.GetValues(typeof(StateCode)))
        {
            <option value="@stateCode" selected="@(State.SelectedState == stateCode)">@stateCode.ToString().ToUpper()</option>
        }
    </select>

    Discipline:
    <select @bind=State.SelectedDiscipline>
        <option> Select a Discipline</option>
        @foreach (var discipline in Enum.GetNames(typeof(Discipline)))
        {
            <option value="@discipline" selected="@(State.SelectedDiscipline?.ToString() == discipline)">@discipline</option>
        }
    </select>

    Year:
    <input
        type="number"
        min="@(DateTime.Today.Year - 4)"
        max="@(DateTime.Today.Year + 1)"
        @bind=State.SelectedSeason />
</div>

@if (State.SelectedSeason > 0 && State.SelectedState != null && State.SelectedDiscipline != null)
{
    <div>
        Search: <input type="text" @bind=SearchString />
        @foreach (var (meetId, meetName) in SearchResults)
        {
            <div><a href="/meets/@meetId">@meetName</a></div>
        }
    </div>
}

@code
{
    public Dictionary<string, string> SearchResults { get; set; } = new();
    public string? SearchString { get; set; }

    bool CanSearch => State.SelectedSeason > 0 && State.SelectedState != null && State.SelectedDiscipline != null;
    string SerializedSearchParams => SearchString + State.SelectedSeason + State.SelectedState + State.SelectedDiscipline;

    private string? _lastSearchParams;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // If the search params have changes since the last time we were here, search for meets.
        if (_lastSearchParams != SerializedSearchParams)
        {
            _lastSearchParams = SerializedSearchParams;
            if (CanSearch)
            {
                SearchResults = await MeetService.SearchMeetsAsync(
                    State.SelectedSeason,
                    State.SelectedState,
                    State.SelectedDiscipline,
                    SearchString);

                // Call StateHasChanged to trigger the component to re-render or it won't display the results.
                StateHasChanged();
            }
        }
    }
}
