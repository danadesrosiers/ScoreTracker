@page "/"
@using ScoreTracker.Client.Services
@using ScoreTracker.Shared.Athletes
@using ScoreTracker.Shared.Users
@using System.Timers
@using System.Collections.ObjectModel
@inject IMeetService _meetService
@inject IUserService _userService
@inject IAthleteService _athleteService
@inject ComponentApplicationState _applicationState
@implements IDisposable

<h1>Score Tracker</h1>

@if (_userService.User?.Subscriptions != null)
{
    <h2>My Meets</h2>
    foreach (var (id, name) in Meets)
    {
        <div><a href="/meets/@id">@name</a></div>
    }

    <h2>Following Clubs</h2>
    foreach (var (id, name) in FollowingClubs)
    {
        <div><a href="/clubs/@id">@name</a></div>
    }

    <h2>Following Athletes</h2>
    foreach (var (id, name) in FollowingAthletes)
    {
        <div><a href="/athletes/@id">@name</a></div>
    }

    <h2>Scores</h2>
    foreach (var result in Results)
    {
        <div>Athlete: @result.AthleteName (@result.ClubName), @result.MeetName, @result.Event: @result.Score.FinalScore (@result.Score.LastModified)</div>
    }
}

@code
{
    Dictionary<string, string> Meets { get; set; } = new();
    Dictionary<string, string> FollowingAthletes { get; set; } = new();
    Dictionary<string, string> FollowingClubs { get; set; } = new();
    List<AthleteResult> Results { get; set; } = new();
    ICollection<Subscription> _previousSubscriptions = new Collection<Subscription>();
    Timer _timer = new(10000);

    protected override void OnInitialized()
    {
        _userService.OnUserChange += StateHasChanged;
        _timer.Elapsed += async (_, _) => await RefreshDataAsync();
        _timer.Start();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var currentSubscriptions = _userService.User?.Subscriptions;
        if (currentSubscriptions != null && !_previousSubscriptions.Equals(currentSubscriptions))
        {
            _previousSubscriptions = currentSubscriptions;
            await RefreshDataAsync();
            StateHasChanged();
        }
    }

    async Task RefreshDataAsync()
    {
        FollowingClubs = _userService.User?.Subscriptions?
            .Where(s => !string.IsNullOrEmpty(s.ClubId))
            .ToDictionary(s => s.ClubId!, s => s.Name) ?? new();
        FollowingAthletes = _userService.User?.Subscriptions?
            .Where(s => !string.IsNullOrEmpty(s.AthleteId))
            .ToDictionary(s => s.AthleteId!, s => s.Name) ?? new();

        var resultsQuery = new AthleteResultQuery
        {
            ClubIds = FollowingClubs?.Keys!,
            AthleteIds = FollowingAthletes?.Keys!
        };
        Results = await _athleteService.GetAthleteResults(resultsQuery)
            .OrderByDescending(ar => ar.Score.LastModified)
            .ToListAsync();

        Meets = Results.Select(r => (r.MeetId, r.MeetName)).Distinct().ToDictionary(r => r.MeetId, r => r.MeetName);
        StateHasChanged();
    }

    public void Dispose()
    {
        _userService.OnUserChange -= StateHasChanged;
        _timer.Dispose();
    }
}
