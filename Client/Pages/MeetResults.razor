@page "/meets/{MeetId}"
@using ScoreTracker.Shared.Results
@using ScoreTracker.Shared.Meets
@using System.Text.Json
@using System.Timers
@using ScoreTracker.Client.Components
@using ScoreTracker.Client.Services
@inject IMeetService _meetService
@inject StateContainer _state
@implements IDisposable
@inherits CustomComponentBase

@if (Meet != null)
{
    <h1>@Meet.Name</h1>

    <div>
        Clubs:
        <select @bind=SelectedClubId>
            <option value="">All Clubs</option>
            @foreach (var (id, clubName) in Clubs)
            {
                <option value="@id" selected="@(SelectedClubId == id)">@clubName</option>
            }
        </select>
    </div>

    <div>
        Levels:
        @foreach (var level in Meet.Levels)
        {
            <div>
                <input type="checkbox" @bind="SelectedLevels[level.Name]" />
                <span style="margin-right: 10px;">@level.Name</span>
                @foreach (var division in level.Divisions)
                {
                    if (SelectedLevels[level.Name])
                    {
                        <input type="checkbox" @bind="SelectedDivisions[level.Name + division.Name]"/>
                        <span style="margin-right: 5px;">@division.Name</span>
                    }
                    else
                    {
                        SelectedDivisions[level.Name + division.Name] = false;
                    }
                }
            </div>
        }
    </div>
    <div>
        <input type="checkbox" @bind=CombineRankings /> Combine Rankings
    </div>
    if (_loading)
    {
        <div>LOADING...</div>
    }
}
else
{
    <div>loading...</div>
}

<h1>Individual Results</h1>
<ResultsTable
    Scores="@IndividualResults"
    ClubIdFilter="@SelectedClubId"
    ShowGymnastName
    ShowLevel="@ShowLevels"
    ShowDivision="@ShowDivisions"
    ShowCombinedRankings="@CombineRankings" />

<h1>Team Results</h1>
<ResultsTable
    Scores="@TeamResults"
    ClubIdFilter="@SelectedClubId"
    ShowLevel="@ShowLevels"
    ShowCombinedRankings="@true" />

@code {
    [Parameter]
    public string MeetId { get; init; } = null!;

    Meet? Meet { get; set; }

    bool CombineRankings { get; set; }
    string? SelectedClubId { get; set; }
    IDictionary<string, bool> SelectedLevels => _state.SelectedLevels[MeetId];
    IDictionary<string, bool> SelectedDivisions => _state.SelectedDivisions[MeetId];

    ICollection<MeetResult> IndividualResults { get; set; } = new List<MeetResult>();
    ICollection<MeetResult> TeamResults { get; set; } = new List<MeetResult>();

    Dictionary<string, string> Clubs { get; set; } = new();

    bool ShowLevels => SelectedLevels.Count(l => l.Value) > 1;
    bool ShowDivisions => SelectedDivisions.Count(d => d.Value) > 1;

    private readonly Timer _timer = new(10000);
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        Meet = await _meetService.GetMeetAsync(MeetId);

        _timer.Elapsed += (_, _) =>
        {
            var _ = Task.Run(async () =>
            {
                await GetScoresAsync();
                StateHasChanged();
            });
        };
        _timer.Start();

        OnChange(
            () => SelectedDivisions,
            _ => ToggleLoading(true),
            GetScoresAsync);
    }

    async Task GetScoresAsync(IDictionary<string, bool>? previousValue = null)
    {
        var divisions = (from division in SelectedDivisions
            where division.Value
            select division.Key).ToList();

        if (divisions.Count > 0)
        {
            Console.WriteLine("Get Scores");
            Console.WriteLine(JsonSerializer.Serialize(divisions));
            IndividualResults = await _meetService.GetResults(MeetId, divisions);
            TeamResults = _meetService.CalculateTeamResults(IndividualResults);
        }
        else
        {
            IndividualResults = new List<MeetResult>();
            TeamResults = new List<MeetResult>();
        }

        Clubs = TeamResults
            .GroupBy(team => team.ClubId)
            .ToDictionary(grp => grp.Key, grp => grp.First().Club);

        await ToggleLoading(false);
    }

    public void Dispose()
    {
        _timer.Dispose();
    }

    private Task ToggleLoading(bool isOn)
    {
        _loading = isOn;
        return Task.CompletedTask;
    }
}
