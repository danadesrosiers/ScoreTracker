@page "/meetresults/{MeetId}"
@using ScoreTracker.Shared.Results
@using ScoreTracker.Shared.Meets
@using System.Text.Json
@using ScoreTracker.Client.Components
@using ScoreTracker.Client.Services
@inject MeetService MeetService
@inject StateContainer State

@if (Meet != null)
{
    <h1>@Meet.Name</h1>

    <div>
        Clubs:
        <select @bind=SelectedClubId>
            <option value="">All Clubs</option>
            @foreach (var (id, clubName) in Clubs)
            {
                <option value="@id" selected="@(SelectedClubId == id)">@clubName</option>
            }
        </select>
    </div>

    <div>
        Levels:
        @foreach (var level in Meet.Levels)
        {
            <div>
                <input type="checkbox" @bind="SelectedLevels[level.Name]" />
                @level.Name
                @if (SelectedLevels[level.Name])
                {
                    <span>Divisions: </span>
                    @foreach (var division in level.Divisions)
                    {
                        <input type="checkbox" @bind="SelectedDivisions[level.Name + division.Name]" />
                        @division.Name
                    }
                }
            </div>
        }
    </div>
    <div>
        <input type="checkbox" @bind=CombineRankings /> Combine Rankings
    </div>
}
else
{
    <div>loading...</div>
}

<h1>Individual Results</h1>
<ResultsTable
    Scores="@IndividualResults"
    ClubIdFilter="@SelectedClubId"
    ShowGymnastName
    ShowLevel="@ShowLevels"
    ShowDivision="@ShowDivisions"
    ShowCombinedRankings="@CombineRankings" />

<h1>Team Results</h1>
<ResultsTable
    Scores="@TeamResults"
    ClubIdFilter="@SelectedClubId"
    ShowLevel="@ShowLevels"
    ShowCombinedRankings="@true" />

@code {
    [Parameter]
    public string MeetId { get; init; }

    Meet Meet { get; set; }

    bool CombineRankings { get; set; } = false;
    string SelectedClubId { get; set; }
    IDictionary<string, bool> SelectedLevels => State.SelectedLevels[MeetId];
    IDictionary<string, bool> SelectedDivisions => State.SelectedDivisions[MeetId];

    ICollection<Result> IndividualResults { get; set; } = new List<Result>();
    ICollection<Result> TeamResults { get; set; } = new List<Result>();

    Dictionary<string, string> Clubs { get; set; } = new();

    bool ShowLevels => SelectedLevels.Count(l => l.Value) > 1;
    bool ShowDivisions => SelectedDivisions.Count(d => d.Value) > 1;

    string _previousSelectedDivisions = "";

    protected override async Task OnInitializedAsync()
    {
        Meet = await MeetService.GetMeetAsync(MeetId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var selectedDivisions = string.Join("", SelectedDivisions);
        if (selectedDivisions != _previousSelectedDivisions)
        {
            _previousSelectedDivisions = selectedDivisions;
            await GetScores();
            StateHasChanged();
        }
    }

    async Task GetScores()
    {
        var divisions = (from division in SelectedDivisions
            where division.Value
            select division.Key).ToList();

        if (divisions.Count > 0)
        {
            Console.WriteLine("Get Scores");
            Console.WriteLine(JsonSerializer.Serialize(divisions));
            IndividualResults = await MeetService.GetResults(MeetId, divisions);
            TeamResults = MeetService.CalculateTeamResults(IndividualResults);
        }
        else
        {
            IndividualResults = new List<Result>();
            TeamResults = new List<Result>();
        }

        Clubs = TeamResults
            .GroupBy(team => team.ClubId)
            .ToDictionary(grp => grp.Key, grp => grp.First().Club);
    }
}
